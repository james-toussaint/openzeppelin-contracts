name: Release Upgradeable

on:
  workflow_dispatch: {}

jobs:
  release-upgradeable:
    environment: push-upgradeable
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          repository: OpenZeppelin/openzeppelin-contracts
          fetch-depth: 0
          ref: ${{ github.ref }}
      - name: Get vanilla commit
        run: |
          echo "VANILLA_COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      - uses: actions/checkout@v5
        with:
          repository: james-toussaint/openzeppelin-contracts-upgradeable
          fetch-depth: 0
          submodules: true
          token: ${{ secrets.GH_TOKEN_UPGRADEABLE }}
          ref: ${{ github.ref }}
      - name: Run
        run: |
          if ! $(git log -1 --pretty=%B | grep -q "Transpile $VANILLA_COMMIT"); then
            echo "Expected 'Transpile $VANILLA_COMMIT' but found '$(git log -1 --pretty=%B)'"
          fi
          VERSION="$(jq -r .version package.json)"
          echo "$VERSION"
          TAG="v$VERSION"
          echo "$TAG"
          ### START BLOCK - TODO: Remove block
          TIMESTAMPED_VERSION="$VERSION-$(date +%s)"
          echo "$TIMESTAMPED_VERSION"
          TAG="$TAG-$(date +%s)"
          echo "$TAG"
          ls
          ls contracts
          sed -i '' -e 's/openzeppelin\/contracts-upgradeable/james-toussaint\/contracts-upgradeable/g' contracts/package.json
          head contracts/package.json
          sed -i '' -e "s/$VERSION/$TIMESTAMPED_VERSION/g" contracts/package.json
          head contracts/package.json
          ### END BLOCK
          npm ci
          bash scripts/git-user-config.sh
          git tag -m {,}$TAG
          git push origin tag $TAG
          NPM_TAG="tmp"
          if [[ "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            NPM_TAG="next"
          elif [[ "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+-rc.[0-9]+$ ]]; then
            NPM_TAG="dev"
          fi
          cd contracts
          # Intentionally escape $ to avoid interpolation and writing the token to disk
          echo "//registry.npmjs.org/:_authToken=\${NPM_TOKEN}" > .npmrc
          npm publish --tag $NPM_TAG
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
